class Solution {
  
    public int numIslands(char[][] grid) {
        return getIslandCount(grid);
    }
    
    public int getIslandCount(char[][] grid){
        int count = 0;
        if(grid.length==0) return 0;
        boolean visited[][]= new boolean[grid.length][grid[0].length];

         for(int i = 0; i <grid.length ; i++) {
            for(int j = 0; j< grid[0].length ; j++){
                if(grid[i][j] == '1' && !visited[i][j]) {
                    dfs(grid, i, j,visited);
                     ++count;
                }
            }
        }
        return count;
    }
    
   
    
    public void dfs(char[][] grid, int i, int j, boolean[][] visited){
        if(i<0 || i>=grid.length || j<0 || j>=grid[0].length ||grid[i][j]=='0')                  return;
        grid[i][j] = '0';
        visited[i][j] = true;
        dfs(grid, i+1 , j,visited);
        dfs(grid, i-1 , j,visited);
        dfs(grid, i , j+1,visited);
        dfs(grid, i , j-1,visited);

        //if all the 8 neighbours are considered i.e vertical, horizonal and diagonal
        //we can consider the below code which consists of all the 8 possibilities

        // int rowNo[] = new int[] { -1, -1, -1, 0, 0, 1, 1, 1 }; 
        // int colNo[] = new int[] { -1, 0, 1, -1, 1, -1, 0, 1 }; 
      
        // for(int k =0; k<8;k++){
        //   if(isSafe(grid, i + rowNo[k], j + colNo[k], visited)){
        //       dfs(grid,i + rowNo[k], j + colNo[k], visited);
          // }
        // }

         // public boolean isSafe(char[][] grid, int r, int c, boolean[][] visited) {
    //     return (r>=0) && (r<row) && (c>=0) && (c<col) && (grid[r][c]=='1' && !visited[r][c]);
    // }
    }
}

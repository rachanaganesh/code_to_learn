/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 
 Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6
complexity: O(knlogk) : There are 'k' lists with 'n' elements. Priority Queue takes O(log k). Thus, O(nk log k).
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
    PriorityQueue<ListNode> queue = new PriorityQueue<ListNode>((a,b)-> a.val-b.val);
        for(ListNode list : lists) {
        //In first loop the queue hold 1->1->2. 
            if(list!=null){
            queue.add(list);
            }
        }
        ListNode result = new ListNode(0);
        ListNode tail = result;
        while(!queue.isEmpty()) {
        //In first loop after adding 1 to tail we need to add 4 to the listfrom first list
        //i.e 1->4->2 for the next round.
            tail.next = queue.poll();
            tail = tail.next;
            //So we check if the tail.next is not null and add the list to queue to maintain 'k' size in heap
            //as we poll the elements from queue.
            if(tail.next != null) {
                queue.add(tail.next);
            }
        }
      return result.next;
    }
}
